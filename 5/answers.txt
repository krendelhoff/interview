1. Классы типов являются инструментом для реализации ad-hoc полиморфизма. На практике их можно вводить для того, чтобы обозначить интерфейс "объектов" (значений типа), то, что с ними можно делать, как можно с ними работать. 
2. Ключевое слово deriving позволяет автоматически делать инстанты классов типов. По поводу второго вопроса - нашел папер, который говорит, что парсеры используют операции, образующие структуру полукольца. Видимо, это используется в том числе для того, чтобы генерировать инстансы.
3. Со stack работал, идея Stackage создать курируемый набор пакетов с гарантированной совместимостью, таким образом можно избежать выставления верхних границ версий пакетов и dependency hell.
4. Не приходилось.
5. Средство, позволяющее оптимизировать выполнение запросов, избавляя от необходимости повторно делать одну и ту же работу по анализу и т.д.
6. Тип - множество значений. Можно ввести операции над типами - сумму и произведение, которые соответствуют дизъюнктному объединению множеств и их декартовому произведению. Алгебраические типы данных - то, что получается в результате этих операций. Операции обладают привычными алгебраическими свойствами сложения и умножения, а так же дистрибутивностью (c точностью до изоморфизма).
7. Ссылочная прозрачность обеспечена отсутствием изменяемого состояния и укреплена сильной системой типов. Управление побочными эффектами происходит с помощью монад. В случае с грязными побочными эффектами, такими как ввод-вывод, в сигнатуре всегда обозначен соотвествующий контекст, что уже не позволит использовать это внутри чистых функций (без unsafePerformIO).
